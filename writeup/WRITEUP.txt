                              ____________

                                WRITEUP
                              ____________






  - Member 1: <Daisuke Oto> <oto00001> 


Problem 1: kmeans_omp
=====================

kmeans_omp Timing Table
~~~~~~~~~~~~~~~~~~~~~~~


  The columns are for each of 3 data files that are provided and run in
  the job script.

  -------------------------------------------------------------------
                                       Data File                     
   Procs  digits_all_5e3.txt  digits_all_1e4.txt  digits_all_3e4.txt 
  -------------------------------------------------------------------
       1                3.32               20.00               54.79 
       2                1.94               10.61               29.11 
       4                1.25                5.99               16.35 
       8                0.91                3.54                9.61 
      10                0.82                3.02                8.26 
      13                0.76                2.56                6.94 
      16                0.73                2.29                6.19 
      32                0.71                1.78                4.64 
  -------------------------------------------------------------------


kmeans_omp Discussion Questions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  1. Did using more processors result in speedups?

  From the result, we can see that when more processors were used, 
  there was a speed up. 

  2. Describe any trends or anomalies you see in the timings and
     speculate on their causes - e.g. was there are a steady increase in
     runtimes, steady decrease, or jagged changes in timing?

  Looking at the table above, we can observe that as the number of 
  processor increases, there was a steady decrease in the runtime.

  3. Try to explain how number of processors and problem size seem to
     affect runtimes/speedup in the problem.

  When the problem size increases, the runtime also increases, but 
  when the number of processors increase, the runtime decreases. 
  Also, with larger problem size, we can see that there are more
  speedup when number of processors increases.


Problem 2: kmeans_cuda
======================

kmeans_cuda Timing Table
~~~~~~~~~~~~~~~~~~~~~~~~

  The columns are for each of 3 data files that are provided and run in
  the job script.

  ------------------------------------------------------------------------
                                            Data File                     
   Procs       digits_all_5e3.txt  digits_all_1e4.txt  digits_all_3e4.txt 
  ------------------------------------------------------------------------
   CPU Serial                3.26               17.99               52.89 
   GPU                       1.76                4.99               10.70 
  ------------------------------------------------------------------------


kmeans_cuda Discussion Questions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  1. Did using the GPU result in speedups?

  Using the GPU resulted in speed up for runrime. 

  2. Describe your general approach on how you used GPU threads/blocks
     to parallelize the algorithm.
     - How did you subdivide the Cluster Center Calculation Phase?
     - How did you subdivide the Data Assignment Phase?

  - For the cluster center calculation, number of blocks used was equal to the 
    number of clusters, and number of threads used was equal to the dimension of 
    the data, which is 784. Each block checks if the data currently working on is 
    assigned to the cluster that has the same number with their blockIdx. If the
    assigned cluster is equal to the blockIdx, each thread will start adding the 
    data feature dimension to the cluster feature dimension at the threadIdx. 
    In my design, each block will only work on their assigned cluster, and each
    thread works on only 1 feature dimension. This way, there will be no conflict
    multiple threads and blocks accessing the same element. 

  - For the data assignment phase, I designed in a way that each thread takes care 
    of the data element. So if there are 5000 data element, there will be 5000 threads 
    working. However, we can not launch more than 1024 threads, if there are more than
    1000 elements, I devided among blocks. So if there are 5000 elements, there will
    be 5 blocks working, where each of them having 1000 threads. In the way that I
    designed, the only coordination needed was for cluster counts and nchanges, 
    because all of the thread are working on different elements. 
